{"ast":null,"code":"var _jsxFileName = \"/Users/estivensalazar/Desktop/Code/GQL_Soccer_Teams/client/src/components/PlayerTable/PlayerTable.js\";\n//importing dependencies\nimport React, { Component } from \"react\";\nimport { graphql } from \"react-apollo\";\nimport { getTeamQuery } from \"../../Queries/queries.js\";\nimport { Table } from \"reactstrap\";\n\nfunction PlayerTable(props) {\n  function displayPlayerDetails() {\n    const team = props.data.team.team; // if/else statement used to render data if team is selected, else ... return 'no team selected'\n\n    if (team) {\n      const players = team.players;\n      console.log(team);\n      return players.map(player => {\n        return React.createElement(\"tr\", {\n          key: player.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 18\n          },\n          __self: this\n        }, React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 19\n          },\n          __self: this\n        }, player.player_name), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 20\n          },\n          __self: this\n        }, player.position), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 21\n          },\n          __self: this\n        }, player.age));\n      });\n    } else {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }, \"Loading Players...\");\n    }\n  } // console.log(props.teams.teams);\n\n\n  console.log(props);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, React.createElement(Table, {\n    dark: true,\n    bordered: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, React.createElement(\"thead\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, \"Name\"), React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, \"Position\"), React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, \"Age\"))), React.createElement(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  })));\n} // here we pass the 'book's ID' from the props as an argument into the options\n// parameter of the getBookQuery in order to isolate the single book that was selected\n\n\nexport default graphql(getTeamQuery, {\n  options: props => {\n    return {\n      variables: {\n        id: props.teamId\n      }\n    };\n  }\n})(PlayerTable);","map":{"version":3,"sources":["/Users/estivensalazar/Desktop/Code/GQL_Soccer_Teams/client/src/components/PlayerTable/PlayerTable.js"],"names":["React","Component","graphql","getTeamQuery","Table","PlayerTable","props","displayPlayerDetails","team","data","players","console","log","map","player","id","player_name","position","age","options","variables","teamId"],"mappings":";AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,SAASC,YAAT,QAA6B,0BAA7B;AACA,SAASC,KAAT,QAAsB,YAAtB;;AAEA,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AAC3B,WAASC,oBAAT,GAAgC;AAAA,UACvBC,IADuB,GACdF,KAAK,CAACG,IAAN,CAAWD,IADG,CACvBA,IADuB,EAG/B;;AACA,QAAIA,IAAJ,EAAU;AACT,YAAME,OAAO,GAAGF,IAAI,CAACE,OAArB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AAEA,aAAOE,OAAO,CAACG,GAAR,CAAYC,MAAM,IAAI;AAC5B,eACC;AAAI,UAAA,GAAG,EAAEA,MAAM,CAACC,EAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAKD,MAAM,CAACE,WAAZ,CADD,EAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAKF,MAAM,CAACG,QAAZ,CAFD,EAGC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAKH,MAAM,CAACI,GAAZ,CAHD,CADD;AAOA,OARM,CAAP;AASA,KAbD,MAaO;AACN,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAAP;AACA;AACD,GArB0B,CAuB3B;;;AACAP,EAAAA,OAAO,CAACC,GAAR,CAAYN,KAAZ;AAEA,SACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC,oBAAC,KAAD;AAAO,IAAA,IAAI,MAAX;AAAY,IAAA,QAAQ,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADD,EAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFD,EAGC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAHD,CADD,CADD,EAQC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARD,CADD,CADD;AAgBA,C,CAED;AACA;;;AACA,eAAeJ,OAAO,CAACC,YAAD,EAAe;AACpCgB,EAAAA,OAAO,EAAEb,KAAK,IAAI;AACjB,WAAO;AACNc,MAAAA,SAAS,EAAE;AACVL,QAAAA,EAAE,EAAET,KAAK,CAACe;AADA;AADL,KAAP;AAKA;AAPmC,CAAf,CAAP,CAQZhB,WARY,CAAf","sourcesContent":["//importing dependencies\nimport React, { Component } from \"react\";\nimport { graphql } from \"react-apollo\";\nimport { getTeamQuery } from \"../../Queries/queries.js\";\nimport { Table } from \"reactstrap\";\n\nfunction PlayerTable(props) {\n\tfunction displayPlayerDetails() {\n\t\tconst { team } = props.data.team;\n\n\t\t// if/else statement used to render data if team is selected, else ... return 'no team selected'\n\t\tif (team) {\n\t\t\tconst players = team.players;\n\t\t\tconsole.log(team);\n\n\t\t\treturn players.map(player => {\n\t\t\t\treturn (\n\t\t\t\t\t<tr key={player.id}>\n\t\t\t\t\t\t<td>{player.player_name}</td>\n\t\t\t\t\t\t<td>{player.position}</td>\n\t\t\t\t\t\t<td>{player.age}</td>\n\t\t\t\t\t</tr>\n\t\t\t\t);\n\t\t\t});\n\t\t} else {\n\t\t\treturn <div>Loading Players...</div>;\n\t\t}\n\t}\n\n\t// console.log(props.teams.teams);\n\tconsole.log(props);\n\n\treturn (\n\t\t<div>\n\t\t\t<Table dark bordered>\n\t\t\t\t<thead>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>Name</th>\n\t\t\t\t\t\t<th>Position</th>\n\t\t\t\t\t\t<th>Age</th>\n\t\t\t\t\t</tr>\n\t\t\t\t</thead>\n\t\t\t\t<tbody>\n\t\t\t\t\t{/* {this.displayPlayerDetails()} */}\n\t\t\t\t</tbody>\n\t\t\t</Table>\n\t\t</div>\n\t);\n}\n\n// here we pass the 'book's ID' from the props as an argument into the options\n// parameter of the getBookQuery in order to isolate the single book that was selected\nexport default graphql(getTeamQuery, {\n\toptions: props => {\n\t\treturn {\n\t\t\tvariables: {\n\t\t\t\tid: props.teamId\n\t\t\t}\n\t\t};\n\t}\n})(PlayerTable);\n"]},"metadata":{},"sourceType":"module"}