{"ast":null,"code":"var _jsxFileName = \"/Users/estivensalazar/Desktop/Code/GQL_Soccer_Teams/client/src/components/PlayerTable/PlayerTable.js\";\n//importing dependencies\nimport React, { Component } from \"react\";\nimport { graphql } from \"react-apollo\";\nimport { getPlayersQuery } from \"../../Queries/queries.js\";\n\nclass PlayerTable extends Component {\n  displayPlayerDetails() {\n    const teamId = this.props.data.teamId; // if/else statement used to render data if team is selected, else ... return 'no team selected'\n\n    if (teamId) {\n      return React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 12\n        },\n        __self: this\n      }, teamId);\n    } else {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 14\n        },\n        __self: this\n      }, \"No Team Selected...\");\n    }\n  }\n\n  render() {\n    console.log(this.props);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }, this.displayPlayerDetails());\n  }\n\n} // here we pass the 'book's ID' from the props as an argument into the options\n// parameter of the getBookQuery in order to isolate the single book that was selected\n\n\nexport default graphql(getPlayersQuery, {\n  options: props => {\n    return {\n      variables: {\n        id: props.team_id\n      }\n    };\n  }\n})(PlayerTable);","map":{"version":3,"sources":["/Users/estivensalazar/Desktop/Code/GQL_Soccer_Teams/client/src/components/PlayerTable/PlayerTable.js"],"names":["React","Component","graphql","getPlayersQuery","PlayerTable","displayPlayerDetails","teamId","props","data","render","console","log","options","variables","id","team_id"],"mappings":";AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,SAASC,eAAT,QAAgC,0BAAhC;;AAEA,MAAMC,WAAN,SAA0BH,SAA1B,CAAoC;AACnCI,EAAAA,oBAAoB,GAAG;AAAA,UACdC,MADc,GACH,KAAKC,KAAL,CAAWC,IADR,CACdF,MADc,EAGtB;;AACA,QAAIA,MAAJ,EAAY;AACX,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKA,MAAL,CAAP;AACA,KAFD,MAEO;AACN,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAP;AACA;AACD;;AAEDG,EAAAA,MAAM,GAAG;AACRC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKJ,KAAjB;AAEA,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAM,KAAKF,oBAAL,EAAN,CAAP;AACA;;AAhBkC,C,CAmBpC;AACA;;;AACA,eAAeH,OAAO,CAACC,eAAD,EAAkB;AACvCS,EAAAA,OAAO,EAAEL,KAAK,IAAI;AACjB,WAAO;AACNM,MAAAA,SAAS,EAAE;AACVC,QAAAA,EAAE,EAAEP,KAAK,CAACQ;AADA;AADL,KAAP;AAKA;AAPsC,CAAlB,CAAP,CAQZX,WARY,CAAf","sourcesContent":["//importing dependencies\nimport React, { Component } from \"react\";\nimport { graphql } from \"react-apollo\";\nimport { getPlayersQuery } from \"../../Queries/queries.js\";\n\nclass PlayerTable extends Component {\n\tdisplayPlayerDetails() {\n\t\tconst { teamId } = this.props.data;\n\n\t\t// if/else statement used to render data if team is selected, else ... return 'no team selected'\n\t\tif (teamId) {\n\t\t\treturn <h1>{teamId}</h1>;\n\t\t} else {\n\t\t\treturn <div>No Team Selected...</div>;\n\t\t}\n\t}\n\n\trender() {\n\t\tconsole.log(this.props);\n\n\t\treturn <div>{this.displayPlayerDetails()}</div>;\n\t}\n}\n\n// here we pass the 'book's ID' from the props as an argument into the options\n// parameter of the getBookQuery in order to isolate the single book that was selected\nexport default graphql(getPlayersQuery, {\n\toptions: props => {\n\t\treturn {\n\t\t\tvariables: {\n\t\t\t\tid: props.team_id\n\t\t\t}\n\t\t};\n\t}\n})(PlayerTable);\n"]},"metadata":{},"sourceType":"module"}