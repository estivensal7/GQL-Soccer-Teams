{"ast":null,"code":"var _jsxFileName = \"/Users/estivensalazar/Desktop/Code/GQL_Soccer_Teams/client/src/components/PlayerTable/PlayerTable.js\";\n//importing dependencies\nimport React, { Component } from \"react\";\nimport { graphql } from \"react-apollo\";\nimport { getTeamQuery } from \"../../Queries/queries.js\";\nimport { Table } from \"reactstrap\";\n\nclass PlayerTable extends Component {\n  displayPlayerDetails() {\n    const teamId = this.props.teamId;\n    const team = this.props.data.team; // if/else statement used to render data if team is selected, else ... return 'no team selected'\n\n    if (teamId) {\n      const players = team.players;\n      console.log(team);\n      return players.map(player => {\n        return React.createElement(\"tr\", {\n          key: player.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 19\n          },\n          __self: this\n        }, React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 20\n          },\n          __self: this\n        }, player.player_name), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 21\n          },\n          __self: this\n        }, player.position), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 22\n          },\n          __self: this\n        }, player.age));\n      });\n    } else {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }, \"No Team Selected...\");\n    }\n  }\n\n  render() {\n    console.log(this.props);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, React.createElement(Table, {\n      dark: true,\n      bordered: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, \"Name\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, \"Position\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, \"Age\"))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, this.displayPlayerDetails())));\n  }\n\n} // here we pass the 'book's ID' from the props as an argument into the options\n// parameter of the getBookQuery in order to isolate the single book that was selected\n\n\nexport default graphql(getTeamQuery, {\n  options: props => {\n    return {\n      variables: {\n        id: props.teamId\n      }\n    };\n  }\n})(PlayerTable);","map":{"version":3,"sources":["/Users/estivensalazar/Desktop/Code/GQL_Soccer_Teams/client/src/components/PlayerTable/PlayerTable.js"],"names":["React","Component","graphql","getTeamQuery","Table","PlayerTable","displayPlayerDetails","teamId","props","team","data","players","console","log","map","player","id","player_name","position","age","render","options","variables"],"mappings":";AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,SAASC,YAAT,QAA6B,0BAA7B;AACA,SAASC,KAAT,QAAsB,YAAtB;;AAEA,MAAMC,WAAN,SAA0BJ,SAA1B,CAAoC;AACnCK,EAAAA,oBAAoB,GAAG;AAAA,UACdC,MADc,GACH,KAAKC,KADF,CACdD,MADc;AAAA,UAEdE,IAFc,GAEL,KAAKD,KAAL,CAAWE,IAFN,CAEdD,IAFc,EAItB;;AACA,QAAIF,MAAJ,EAAY;AACX,YAAMI,OAAO,GAAGF,IAAI,CAACE,OAArB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AAEA,aAAOE,OAAO,CAACG,GAAR,CAAYC,MAAM,IAAI;AAC5B,eACC;AAAI,UAAA,GAAG,EAAEA,MAAM,CAACC,EAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAKD,MAAM,CAACE,WAAZ,CADD,EAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAKF,MAAM,CAACG,QAAZ,CAFD,EAGC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAKH,MAAM,CAACI,GAAZ,CAHD,CADD;AAOA,OARM,CAAP;AASA,KAbD,MAaO;AACN,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAP;AACA;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACRR,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKL,KAAjB;AAEA,WACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,oBAAC,KAAD;AAAO,MAAA,IAAI,MAAX;AAAY,MAAA,QAAQ,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADD,EAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFD,EAGC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAHD,CADD,CADD,EAQC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,KAAKF,oBAAL,EADF,CARD,CADD,CADD;AAgBA;;AA3CkC,C,CA8CpC;AACA;;;AACA,eAAeJ,OAAO,CAACC,YAAD,EAAe;AACpCkB,EAAAA,OAAO,EAAEb,KAAK,IAAI;AACjB,WAAO;AACNc,MAAAA,SAAS,EAAE;AACVN,QAAAA,EAAE,EAAER,KAAK,CAACD;AADA;AADL,KAAP;AAKA;AAPmC,CAAf,CAAP,CAQZF,WARY,CAAf","sourcesContent":["//importing dependencies\nimport React, { Component } from \"react\";\nimport { graphql } from \"react-apollo\";\nimport { getTeamQuery } from \"../../Queries/queries.js\";\nimport { Table } from \"reactstrap\";\n\nclass PlayerTable extends Component {\n\tdisplayPlayerDetails() {\n\t\tconst { teamId } = this.props;\n\t\tconst { team } = this.props.data;\n\n\t\t// if/else statement used to render data if team is selected, else ... return 'no team selected'\n\t\tif (teamId) {\n\t\t\tconst players = team.players;\n\t\t\tconsole.log(team);\n\n\t\t\treturn players.map(player => {\n\t\t\t\treturn (\n\t\t\t\t\t<tr key={player.id}>\n\t\t\t\t\t\t<td>{player.player_name}</td>\n\t\t\t\t\t\t<td>{player.position}</td>\n\t\t\t\t\t\t<td>{player.age}</td>\n\t\t\t\t\t</tr>\n\t\t\t\t);\n\t\t\t});\n\t\t} else {\n\t\t\treturn <div>No Team Selected...</div>;\n\t\t}\n\t}\n\n\trender() {\n\t\tconsole.log(this.props);\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Table dark bordered>\n\t\t\t\t\t<thead>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<th>Name</th>\n\t\t\t\t\t\t\t<th>Position</th>\n\t\t\t\t\t\t\t<th>Age</th>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</thead>\n\t\t\t\t\t<tbody>\n\t\t\t\t\t\t{this.displayPlayerDetails()}\n\t\t\t\t\t</tbody>\n\t\t\t\t</Table>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n// here we pass the 'book's ID' from the props as an argument into the options\n// parameter of the getBookQuery in order to isolate the single book that was selected\nexport default graphql(getTeamQuery, {\n\toptions: props => {\n\t\treturn {\n\t\t\tvariables: {\n\t\t\t\tid: props.teamId\n\t\t\t}\n\t\t};\n\t}\n})(PlayerTable);\n"]},"metadata":{},"sourceType":"module"}