{"ast":null,"code":"var _jsxFileName = \"/Users/estivensalazar/Desktop/Code/GQL_Soccer_Teams/client/src/components/PlayerTable/PlayerTable.js\";\n//importing dependencies\nimport React, { Component } from \"react\";\nimport { graphql } from \"react-apollo\";\nimport { getPlayersQuery } from \"../../Queries/queries.js\";\n\nclass PlayerTable extends Component {\n  // displayPlayerDetails() {\n  // \tconst { team } = this.props.data;\n  // if/else statement used to render data if team is selected, else ... return 'no team selected'\n  // \tif (team) {\n  // \t\treturn (\n  // \t\t\t<div>\n  // \t\t\t\t<h2>{book.name}</h2>\n  // \t\t\t\t<p>{book.genre}</p>\n  // \t\t\t\t<p>{book.author.name}</p>\n  // \t\t\t\t<p>All books by this author:</p>\n  // \t\t\t\t<ul className=\"other-books\">\n  // \t\t\t\t\t{book.author.books.map(item => {\n  // \t\t\t\t\t\treturn (\n  // \t\t\t\t\t\t\t<li\n  // \t\t\t\t\t\t\t\tkey={\n  // \t\t\t\t\t\t\t\t\titem.id\n  // \t\t\t\t\t\t\t\t}\n  // \t\t\t\t\t\t\t>\n  // \t\t\t\t\t\t\t\t{\n  // \t\t\t\t\t\t\t\t\titem.name\n  // \t\t\t\t\t\t\t\t}\n  // \t\t\t\t\t\t\t</li>\n  // \t\t\t\t\t\t);\n  // \t\t\t\t\t})}\n  // \t\t\t\t</ul>\n  // \t\t\t</div>\n  // \t\t);\n  // \t} else {\n  // \t\treturn <div>No Team Selected...</div>;\n  // \t}\n  // }\n  render() {\n    console.log(this.props);\n    return React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, \"Player Table\"); // return <div id=\"book-details\">{this.displayBookDetails()}</div>;\n  }\n\n} // here we pass the 'book's ID' from the props as an argument into the options\n// parameter of the getBookQuery in order to isolate the single book that was selected\n\n\nexport default graphql(getPlayersQuery, {\n  options: props => {\n    return {\n      variables: {\n        id: props.team_id\n      }\n    };\n  }\n})(PlayerTable);","map":{"version":3,"sources":["/Users/estivensalazar/Desktop/Code/GQL_Soccer_Teams/client/src/components/PlayerTable/PlayerTable.js"],"names":["React","Component","graphql","getPlayersQuery","PlayerTable","render","console","log","props","options","variables","id","team_id"],"mappings":";AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,SAASC,eAAT,QAAgC,0BAAhC;;AAEA,MAAMC,WAAN,SAA0BH,SAA1B,CAAoC;AACnC;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAI,EAAAA,MAAM,GAAG;AACRC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAjB;AAEA,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAP,CAHQ,CAKR;AACA;;AAxCkC,C,CA2CpC;AACA;;;AACA,eAAeN,OAAO,CAACC,eAAD,EAAkB;AACvCM,EAAAA,OAAO,EAAED,KAAK,IAAI;AACjB,WAAO;AACNE,MAAAA,SAAS,EAAE;AACVC,QAAAA,EAAE,EAAEH,KAAK,CAACI;AADA;AADL,KAAP;AAKA;AAPsC,CAAlB,CAAP,CAQZR,WARY,CAAf","sourcesContent":["//importing dependencies\nimport React, { Component } from \"react\";\nimport { graphql } from \"react-apollo\";\nimport { getPlayersQuery } from \"../../Queries/queries.js\";\n\nclass PlayerTable extends Component {\n\t// displayPlayerDetails() {\n\t// \tconst { team } = this.props.data;\n\n\t// if/else statement used to render data if team is selected, else ... return 'no team selected'\n\t// \tif (team) {\n\t// \t\treturn (\n\t// \t\t\t<div>\n\t// \t\t\t\t<h2>{book.name}</h2>\n\t// \t\t\t\t<p>{book.genre}</p>\n\t// \t\t\t\t<p>{book.author.name}</p>\n\t// \t\t\t\t<p>All books by this author:</p>\n\t// \t\t\t\t<ul className=\"other-books\">\n\t// \t\t\t\t\t{book.author.books.map(item => {\n\t// \t\t\t\t\t\treturn (\n\t// \t\t\t\t\t\t\t<li\n\t// \t\t\t\t\t\t\t\tkey={\n\t// \t\t\t\t\t\t\t\t\titem.id\n\t// \t\t\t\t\t\t\t\t}\n\t// \t\t\t\t\t\t\t>\n\t// \t\t\t\t\t\t\t\t{\n\t// \t\t\t\t\t\t\t\t\titem.name\n\t// \t\t\t\t\t\t\t\t}\n\t// \t\t\t\t\t\t\t</li>\n\t// \t\t\t\t\t\t);\n\t// \t\t\t\t\t})}\n\t// \t\t\t\t</ul>\n\t// \t\t\t</div>\n\t// \t\t);\n\t// \t} else {\n\t// \t\treturn <div>No Team Selected...</div>;\n\t// \t}\n\t// }\n\n\trender() {\n\t\tconsole.log(this.props);\n\n\t\treturn <h1>Player Table</h1>;\n\n\t\t// return <div id=\"book-details\">{this.displayBookDetails()}</div>;\n\t}\n}\n\n// here we pass the 'book's ID' from the props as an argument into the options\n// parameter of the getBookQuery in order to isolate the single book that was selected\nexport default graphql(getPlayersQuery, {\n\toptions: props => {\n\t\treturn {\n\t\t\tvariables: {\n\t\t\t\tid: props.team_id\n\t\t\t}\n\t\t};\n\t}\n})(PlayerTable);\n"]},"metadata":{},"sourceType":"module"}