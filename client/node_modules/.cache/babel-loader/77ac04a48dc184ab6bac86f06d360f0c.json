{"ast":null,"code":"var _jsxFileName = \"/Users/estivensalazar/Desktop/Code/GQL_Soccer_Teams/client/src/components/PlayerTable/PlayerTable.js\";\n//importing dependencies\nimport React, { Component } from \"react\";\nimport { graphql } from \"react-apollo\";\nimport { getTeamQuery } from \"../../Queries/queries.js\";\nimport { Table } from \"reactstrap\";\n\nfunction PlayerTable() {\n  // displayPlayerDetails() {\n  // const { teamId } = this.props;\n  // const { teams } = this.props.data.teams.teams;\n  // if/else statement used to render data if team is selected, else ... return 'no team selected'\n  // \tif (teamId) {\n  // \t\tconst players = team.players;\n  // \t\tconsole.log(team);\n  // \t\treturn players.map(player => {\n  // \t\t\treturn (\n  // \t\t\t\t<tr key={player.id}>\n  // \t\t\t\t\t<td>{player.player_name}</td>\n  // \t\t\t\t\t<td>{player.position}</td>\n  // \t\t\t\t\t<td>{player.age}</td>\n  // \t\t\t\t</tr>\n  // \t\t\t);\n  // \t\t});\n  // \t} else {\n  // \t\treturn <div>No Team Selected...</div>;\n  // \t}\n  // }\n  console.log(this.props.data.teams.teams);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, React.createElement(Table, {\n    dark: true,\n    bordered: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, React.createElement(\"thead\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, \"Name\"), React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, \"Position\"), React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, \"Age\"))), React.createElement(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  })));\n} // here we pass the 'book's ID' from the props as an argument into the options\n// parameter of the getBookQuery in order to isolate the single book that was selected\n\n\nexport default graphql(getTeamQuery, {\n  options: props => {\n    return {\n      variables: {\n        id: props.teamId\n      }\n    };\n  }\n})(PlayerTable);","map":{"version":3,"sources":["/Users/estivensalazar/Desktop/Code/GQL_Soccer_Teams/client/src/components/PlayerTable/PlayerTable.js"],"names":["React","Component","graphql","getTeamQuery","Table","PlayerTable","console","log","props","data","teams","options","variables","id","teamId"],"mappings":";AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,SAASC,YAAT,QAA6B,0BAA7B;AACA,SAASC,KAAT,QAAsB,YAAtB;;AAEA,SAASC,WAAT,GAAuB;AACtB;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAL,CAAWC,IAAX,CAAgBC,KAAhB,CAAsBA,KAAlC;AAEA,SACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC,oBAAC,KAAD;AAAO,IAAA,IAAI,MAAX;AAAY,IAAA,QAAQ,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADD,EAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFD,EAGC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAHD,CADD,CADD,EAQC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARD,CADD,CADD;AAgBA,C,CAED;AACA;;;AACA,eAAeR,OAAO,CAACC,YAAD,EAAe;AACpCQ,EAAAA,OAAO,EAAEH,KAAK,IAAI;AACjB,WAAO;AACNI,MAAAA,SAAS,EAAE;AACVC,QAAAA,EAAE,EAAEL,KAAK,CAACM;AADA;AADL,KAAP;AAKA;AAPmC,CAAf,CAAP,CAQZT,WARY,CAAf","sourcesContent":["//importing dependencies\nimport React, { Component } from \"react\";\nimport { graphql } from \"react-apollo\";\nimport { getTeamQuery } from \"../../Queries/queries.js\";\nimport { Table } from \"reactstrap\";\n\nfunction PlayerTable() {\n\t// displayPlayerDetails() {\n\t// const { teamId } = this.props;\n\t// const { teams } = this.props.data.teams.teams;\n\n\t// if/else statement used to render data if team is selected, else ... return 'no team selected'\n\t// \tif (teamId) {\n\t// \t\tconst players = team.players;\n\t// \t\tconsole.log(team);\n\n\t// \t\treturn players.map(player => {\n\t// \t\t\treturn (\n\t// \t\t\t\t<tr key={player.id}>\n\t// \t\t\t\t\t<td>{player.player_name}</td>\n\t// \t\t\t\t\t<td>{player.position}</td>\n\t// \t\t\t\t\t<td>{player.age}</td>\n\t// \t\t\t\t</tr>\n\t// \t\t\t);\n\t// \t\t});\n\t// \t} else {\n\t// \t\treturn <div>No Team Selected...</div>;\n\t// \t}\n\t// }\n\n\tconsole.log(this.props.data.teams.teams);\n\n\treturn (\n\t\t<div>\n\t\t\t<Table dark bordered>\n\t\t\t\t<thead>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>Name</th>\n\t\t\t\t\t\t<th>Position</th>\n\t\t\t\t\t\t<th>Age</th>\n\t\t\t\t\t</tr>\n\t\t\t\t</thead>\n\t\t\t\t<tbody>\n\t\t\t\t\t{/* {this.displayPlayerDetails()} */}\n\t\t\t\t</tbody>\n\t\t\t</Table>\n\t\t</div>\n\t);\n}\n\n// here we pass the 'book's ID' from the props as an argument into the options\n// parameter of the getBookQuery in order to isolate the single book that was selected\nexport default graphql(getTeamQuery, {\n\toptions: props => {\n\t\treturn {\n\t\t\tvariables: {\n\t\t\t\tid: props.teamId\n\t\t\t}\n\t\t};\n\t}\n})(PlayerTable);\n"]},"metadata":{},"sourceType":"module"}