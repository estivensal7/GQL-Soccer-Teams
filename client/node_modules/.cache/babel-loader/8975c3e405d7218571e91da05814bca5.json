{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/estivensalazar/Desktop/Code/GQL_Soccer_Teams/client/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject4() {\n  const data = _taggedTemplateLiteral([\"\\n\\tquery($id: ID!) {\\n\\t\\tbook(id: $id) {\\n\\t\\t\\tid\\n\\t\\t\\tgenre\\n\\t\\t\\tname\\n\\t\\t\\tauthor {\\n\\t\\t\\t\\tid\\n\\t\\t\\t\\tname\\n\\t\\t\\t\\tage\\n\\t\\t\\t\\tbooks {\\n\\t\\t\\t\\t\\tname\\n\\t\\t\\t\\t\\tid\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\"]);\n\n  _templateObject4 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  const data = _taggedTemplateLiteral([\"\\n\\tmutation($name: String!, $genre: String!, $authorId: ID!) {\\n\\t\\taddBook(name: $name, genre: $genre, authorId: $authorId) {\\n\\t\\t\\tname\\n\\t\\t\\tgenre\\n\\t\\t\\tid\\n\\t\\t}\\n\\t}\\n\"]);\n\n  _templateObject3 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  const data = _taggedTemplateLiteral([\"\\n\\t{\\n\\t\\tbooks {\\n\\t\\t\\tname\\n\\t\\t\\tid\\n\\t\\t}\\n\\t}\\n\"]);\n\n  _templateObject2 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n\\t{\\n\\t\\tauthors {\\n\\t\\t\\tname\\n\\t\\t\\tid\\n\\t\\t}\\n\\t}\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\n//importing dependencies\nimport { gql } from \"apollo-boost\"; // query to grab all authors - for each author grab their name, and id\n\nconst getAuthorsQuery = gql(_templateObject()); // query to grab all books - for each author grab their name, and id\n\nconst getBooksQuery = gql(_templateObject2()); // mutation query to add new book - we will need to specify that we are passing through...\n// the 'name' variable of type 'string',\n// the 'genre' variable of type 'string',\n// the 'authorId' variable of type 'ID'\n\nconst addBookMutation = gql(_templateObject3()); // query to grab a single book - we will need to specify that we are passing through...\n// an 'id' variable of type 'ID'\n\nconst getBookQuery = gql(_templateObject4());\nexport { getAuthorsQuery, getBooksQuery, addBookMutation, getBookQuery };","map":{"version":3,"sources":["/Users/estivensalazar/Desktop/Code/GQL_Soccer_Teams/client/src/Queries/queries.js"],"names":["gql","getAuthorsQuery","getBooksQuery","addBookMutation","getBookQuery"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA,SAASA,GAAT,QAAoB,cAApB,C,CAEA;;AACA,MAAMC,eAAe,GAAGD,GAAH,mBAArB,C,CASA;;AACA,MAAME,aAAa,GAAGF,GAAH,oBAAnB,C,CASA;AACA;AACA;AACA;;AACA,MAAMG,eAAe,GAAGH,GAAH,oBAArB,C,CAUA;AACA;;AACA,MAAMI,YAAY,GAAGJ,GAAH,oBAAlB;AAmBA,SAASC,eAAT,EAA0BC,aAA1B,EAAyCC,eAAzC,EAA0DC,YAA1D","sourcesContent":["//importing dependencies\nimport { gql } from \"apollo-boost\";\n\n// query to grab all authors - for each author grab their name, and id\nconst getAuthorsQuery = gql`\n\t{\n\t\tauthors {\n\t\t\tname\n\t\t\tid\n\t\t}\n\t}\n`;\n\n// query to grab all books - for each author grab their name, and id\nconst getBooksQuery = gql`\n\t{\n\t\tbooks {\n\t\t\tname\n\t\t\tid\n\t\t}\n\t}\n`;\n\n// mutation query to add new book - we will need to specify that we are passing through...\n// the 'name' variable of type 'string',\n// the 'genre' variable of type 'string',\n// the 'authorId' variable of type 'ID'\nconst addBookMutation = gql`\n\tmutation($name: String!, $genre: String!, $authorId: ID!) {\n\t\taddBook(name: $name, genre: $genre, authorId: $authorId) {\n\t\t\tname\n\t\t\tgenre\n\t\t\tid\n\t\t}\n\t}\n`;\n\n// query to grab a single book - we will need to specify that we are passing through...\n// an 'id' variable of type 'ID'\nconst getBookQuery = gql`\n\tquery($id: ID!) {\n\t\tbook(id: $id) {\n\t\t\tid\n\t\t\tgenre\n\t\t\tname\n\t\t\tauthor {\n\t\t\t\tid\n\t\t\t\tname\n\t\t\t\tage\n\t\t\t\tbooks {\n\t\t\t\t\tname\n\t\t\t\t\tid\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n`;\n\nexport { getAuthorsQuery, getBooksQuery, addBookMutation, getBookQuery };\n"]},"metadata":{},"sourceType":"module"}